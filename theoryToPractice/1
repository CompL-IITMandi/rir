
╞═══════════════════════════════╡  Compiling f  ╞══════════════════════════════╡

┌──────────────────────────────────────────────────────────────────────────────┐
│ f[0x55acb9dfbbf0]                                                            │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:                                                                  │
├────── Compiled to PIR Version
f[0x55acb9dfbbf0]
BB0
  goto BB1
BB1   <- [0]
  env             e1.0  = MkEnv              l     parent=GlobalEnv, context 1
  val?^           %1.1  = LdVar              eR    is.vector, GlobalEnv
  void                    Visible            v     
  fs              %1.3  = FrameState         lRL   0x55acb9af5bd0+9: [], env=e1.0
  val?            %1.4  = Force              !     %1.1, %1.3, e1.0   <>
  cp              %1.5  = Checkpoint                -> BB2 (default) | BB3 (if assume failed)
BB2   <- [1]
  void                    StVar              lW    var, %1.4, e1.0
  cp              %2.1  = Checkpoint                -> BB4 (default) | BB5 (if assume failed)
BB3   <- [1]
  fs              %3.0  = FrameState         lRL   0x55acb9af5bd0+9: [%1.4], env=e1.0
  void                    Deopt              !     %3.0
BB4   <- [2]
  val?^           %4.0  = LdVar              eR    print, e1.0
  void                    Visible            v     
  fs              %4.2  = FrameState         lRL   0x55acb9af5bd0+32: [], env=e1.0
  val?            %4.3  = Force              !     %4.0, %4.2, e1.0   <>
  cp              %4.4  = Checkpoint                -> BB6 (default) | BB7 (if assume failed)
BB5   <- [2]
  fs              %5.0  = FrameState         lRL   0x55acb9af5bd0+23: [], env=e1.0
  void                    Deopt              !     %5.0
BB6   <- [4]
  void                    StVar              lW    bomb, %4.3, e1.0
  cp              %6.1  = Checkpoint                -> BB8 (default) | BB9 (if assume failed)
BB7   <- [4]
  fs              %7.0  = FrameState         lRL   0x55acb9af5bd0+32: [%4.3], env=e1.0
  void                    Deopt              !     %7.0
BB8   <- [6]
  val?^           %8.0  = LdVar              eR    var, e1.0
  void                    Visible            v     
  fs              %8.2  = FrameState         lRL   0x55acb9af5bd0+55: [], env=e1.0
  val?            %8.3  = Force              !     %8.0, %8.2, e1.0   <>
  cp              %8.4  = Checkpoint                -> BB10 (default) | BB11 (if assume failed)
BB9   <- [6]
  fs              %9.0  = FrameState         lRL   0x55acb9af5bd0+46: [], env=e1.0
  void                    Deopt              !     %9.0
BB10   <- [8]
  void                    Return                   %8.3
BB11   <- [8]
  fs              %11.0 = FrameState         lRL   0x55acb9af5bd0+55: [%8.3], env=e1.0
  void                    Deopt              !     %11.0
│ f[0x55acb9dfbbf0]                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
(LdVar) START
(LdVar) varName: 'is.vector'
(LdVar)[b] i->env() == Env::global() -> call::ldvarGlobal
(LdVar) storedat(Value *): 0x55acba4d6bc0
(LdVar) END
(LdVar) START
(LdVar) varName: 'print'
(LdVar)[b] i->env() == Env::global() -> call::ldvarGlobal
(LdVar) storedat(Value *): 0x55acba4bc560
(LdVar) END

┌──────────────────────────────────────────────────────────────────────────────┐
│ f[0x55acb9dfbbf0]                                                            │
│ Context: CorrOrd,!TMany                                                      │
│ Properties:  Eager, !Reflection                                              │
├────── LLVM Bitcode

%R_bcstack_t = type { i32, i32, %struct.SEXPREC* }
%struct.SEXPREC = type { %struct.sxpinfo_struct, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %union.SEXP_SEXP_SEXP }
%struct.sxpinfo_struct = type { i64 }
%union.SEXP_SEXP_SEXP = type { %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC* }

@spe_BCNodeStackTop = available_externally externally_initialized global %R_bcstack_t*
@spe_constantPool = available_externally externally_initialized global i64
@sym_is.vector = available_externally externally_initialized global %struct.SEXPREC
@dcs_107 = available_externally externally_initialized global %struct.SEXPREC
@0 = private unnamed_addr constant [37 x i8] c"argument is missing, with no default\00", align 1
@dcs_106 = available_externally externally_initialized global %struct.SEXPREC
@1 = private unnamed_addr constant [17 x i8] c"object not found\00", align 1
@sym_print = available_externally externally_initialized global %struct.SEXPREC
@2 = private unnamed_addr constant [37 x i8] c"argument is missing, with no default\00", align 1
@3 = private unnamed_addr constant [17 x i8] c"object not found\00", align 1
@4 = private unnamed_addr constant [37 x i8] c"argument is missing, with no default\00", align 1
@spe_Visible = available_externally externally_initialized global i32

define %struct.SEXPREC* @rsh1_0x55acb9dfbbf0(i8* %code, %R_bcstack_t* %args, %struct.SEXPREC* %env, %struct.SEXPREC* %closure) {
  %1 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %2 = alloca %struct.SEXPREC*, i64 0, align 8
  %"PIR%0.0" = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 0, i32 2
  %"PIR%0.1" = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 0, i32 2
  %"PIR%0.2" = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 1, i32 2
  %"PIR%0.4" = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 0, i32 2
  %3 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %4 = bitcast %R_bcstack_t* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false)
  %5 = getelementptr %R_bcstack_t, %R_bcstack_t* %3, i32 2
  store %R_bcstack_t* %5, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  br label %BB0

BB0:                                              ; preds = %0
  %is.vector = call %struct.SEXPREC* @ldvarGlobal(%struct.SEXPREC* @sym_is.vector)
  %6 = icmp eq %struct.SEXPREC* %is.vector, @dcs_107
  br i1 %6, label %9, label %7, !prof !0

7:                                                ; preds = %9, %BB0
  %8 = icmp eq %struct.SEXPREC* %is.vector, @dcs_106
  br i1 %8, label %16, label %10, !prof !0

9:                                                ; preds = %BB0
  call void @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @0, i32 0, i32 0))
  br label %7

10:                                               ; preds = %16, %7
  store %struct.SEXPREC* %is.vector, %struct.SEXPREC** %"PIR%0.0", align 8
  %11 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%0.0", align 8
  %sxpinfo = getelementptr %struct.SEXPREC, %struct.SEXPREC* %11, i32 0, i32 0, i32 0
  %12 = load i64, i64* %sxpinfo, align 4
  %13 = and i64 %12, 31
  %14 = trunc i64 %13 to i32
  %15 = icmp eq i32 %14, 5
  br i1 %15, label %17, label %23

16:                                               ; preds = %7
  call void @error(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @1, i32 0, i32 0))
  br label %10

17:                                               ; preds = %10
  %18 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %11, i32 0, i32 4, i32 0
  %19 = load %struct.SEXPREC*, %struct.SEXPREC** %18, align 8
  %20 = icmp eq %struct.SEXPREC* %19, @dcs_106
  br i1 %20, label %21, label %24, !prof !1

21:                                               ; preds = %17
  %22 = call %struct.SEXPREC* @forcePromise(%struct.SEXPREC* %11)
  br label %25

23:                                               ; preds = %10
  br label %25

24:                                               ; preds = %17
  br label %25

25:                                               ; preds = %24, %23, %21
  %"PIR%0.11" = phi %struct.SEXPREC* [ %22, %21 ], [ %11, %23 ], [ %19, %24 ]
  store %struct.SEXPREC* %"PIR%0.11", %struct.SEXPREC** %"PIR%0.1", align 8
  %print = call %struct.SEXPREC* @ldvarGlobal(%struct.SEXPREC* @sym_print)
  %26 = icmp eq %struct.SEXPREC* %print, @dcs_107
  br i1 %26, label %29, label %27, !prof !0

27:                                               ; preds = %29, %25
  %28 = icmp eq %struct.SEXPREC* %print, @dcs_106
  br i1 %28, label %36, label %30, !prof !0

29:                                               ; preds = %25
  call void @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @2, i32 0, i32 0))
  br label %27

30:                                               ; preds = %36, %27
  store %struct.SEXPREC* %print, %struct.SEXPREC** %"PIR%0.2", align 8
  %31 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%0.2", align 8
  %sxpinfo2 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %31, i32 0, i32 0, i32 0
  %32 = load i64, i64* %sxpinfo2, align 4
  %33 = and i64 %32, 31
  %34 = trunc i64 %33 to i32
  %35 = icmp eq i32 %34, 5
  br i1 %35, label %37, label %43

36:                                               ; preds = %27
  call void @error(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @3, i32 0, i32 0))
  br label %30

37:                                               ; preds = %30
  %38 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %31, i32 0, i32 4, i32 0
  %39 = load %struct.SEXPREC*, %struct.SEXPREC** %38, align 8
  %40 = icmp eq %struct.SEXPREC* %39, @dcs_106
  br i1 %40, label %41, label %44, !prof !1

41:                                               ; preds = %37
  %42 = call %struct.SEXPREC* @forcePromise(%struct.SEXPREC* %31)
  br label %45

43:                                               ; preds = %30
  br label %45

44:                                               ; preds = %37
  br label %45

45:                                               ; preds = %44, %43, %41
  %"PIR%0.3" = phi %struct.SEXPREC* [ %42, %41 ], [ %31, %43 ], [ %39, %44 ]
  %46 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%0.1", align 8
  %47 = icmp eq %struct.SEXPREC* %46, @dcs_107
  br i1 %47, label %52, label %48, !prof !0

48:                                               ; preds = %52, %45
  %"PIR%0.43" = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%0.1", align 8
  store %struct.SEXPREC* %"PIR%0.43", %struct.SEXPREC** %"PIR%0.4", align 8
  store i32 1, i32* @spe_Visible, align 4
  %49 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%0.4", align 8
  %50 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %51 = getelementptr %R_bcstack_t, %R_bcstack_t* %50, i32 -2
  store %R_bcstack_t* %51, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  ret %struct.SEXPREC* %49

52:                                               ; preds = %45
  call void @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @4, i32 0, i32 0))
  br label %48
}

declare %struct.SEXPREC* @ldvarGlobal(%struct.SEXPREC*)

declare void @error(i8*)

declare %struct.SEXPREC* @forcePromise(%struct.SEXPREC*)

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

attributes #0 = { argmemonly nofree nosync nounwind willreturn writeonly }

!0 = !{!"branch_weights", i32 1, i32 100000000}
!1 = !{!"branch_weights", i32 1, i32 1000}

├────── Final PIR Version
f[0x55acb9dfbbf0]
BB0
  val?^           %0.0  = LdVar              eR    is.vector, GlobalEnv
  val?            %0.1  = Force!             !vr   %0.0,    <>
  val?^           %0.2  = LdVar              eRd   print, GlobalEnv
  val?            %0.3  = Force!             !vr   %0.2,    <>
  val             %0.4  = ChkMissing         e     %0.1   <>
  void                    Visible            v     
  void                    Return                   %0.4

│ f[0x55acb9dfbbf0]                                                            │
└──────────────────────────────────────────────────────────────────────────────┘
function () 
{
    var <- is.vector
    bomb <- print
    var
}
<bytecode: 0x55acb8dbdaf0>
function (x, mode = "any") 
.Internal(is.vector(x, mode))
<bytecode: 0x55acba4ef760>
<environment: namespace:base>
