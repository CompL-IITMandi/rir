/*
AUTOMATICALLY GENERATED FILE, DO NOT EDIT. 

This file is automatically generated as part of the rjit build step. Do not edit it directly as all your changes will be lost after a new build cycle. If you want to change which intrinsics are supported, edit the respective files that define them. 
*/

#include "intrinsics.h"

namespace rjit {
namespace ir {


char const * ConvertToLogicalNoNA::Name = "ConvertToLogicalNoNA";
llvm::FunctionType * ConvertToLogicalNoNA::Type = llvm::FunctionType::get(t::Int, { t::SEXP, t::SEXP }, false);

char const * PrintValue::Name = "PrintValue";
llvm::FunctionType * PrintValue::Type = llvm::FunctionType::get(t::Void, { t::SEXP }, false);

char const * StartFor::Name = "StartFor";
llvm::FunctionType * StartFor::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP }, false);

char const * LoopSequenceLength::Name = "LoopSequenceLength";
llvm::FunctionType * LoopSequenceLength::Type = llvm::FunctionType::get(t::Int, { t::SEXP, t::SEXP }, false);

char const * GetForLoopValue::Name = "GetForLoopValue";
llvm::FunctionType * GetForLoopValue::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::Int }, false);

char const * MarkVisible::Name = "MarkVisible";
llvm::FunctionType * MarkVisible::Type = llvm::FunctionType::get(t::Void, {  }, false);

char const * MarkInvisible::Name = "MarkInvisible";
llvm::FunctionType * MarkInvisible::Type = llvm::FunctionType::get(t::Void, {  }, false);

char const * UserConstant::Name = "UserConstant";
llvm::FunctionType * UserConstant::Type = llvm::FunctionType::get(t::Void, { t::SEXP }, false);

char const * GenericGetVar::Name = "GenericGetVar";
llvm::FunctionType * GenericGetVar::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP }, false);

char const * GenericGetEllipsisArg::Name = "GenericGetEllipsisArg";
llvm::FunctionType * GenericGetEllipsisArg::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP }, false);

char const * GenericSetVar::Name = "GenericSetVar";
llvm::FunctionType * GenericSetVar::Type = llvm::FunctionType::get(t::Void, { t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericSetVarParent::Name = "GenericSetVarParent";
llvm::FunctionType * GenericSetVarParent::Type = llvm::FunctionType::get(t::Void, { t::SEXP, t::SEXP, t::SEXP }, false);

char const * GetFunction::Name = "GetFunction";
llvm::FunctionType * GetFunction::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP }, false);

char const * GetGlobalFunction::Name = "GetGlobalFunction";
llvm::FunctionType * GetGlobalFunction::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP }, false);

char const * GetSymFunction::Name = "GetSymFunction";
llvm::FunctionType * GetSymFunction::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP }, false);

char const * GetBuiltinFunction::Name = "GetBuiltinFunction";
llvm::FunctionType * GetBuiltinFunction::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP }, false);

char const * GetInternalBuiltinFunction::Name = "GetInternalBuiltinFunction";
llvm::FunctionType * GetInternalBuiltinFunction::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP }, false);

char const * CheckFunction::Name = "CheckFunction";
llvm::FunctionType * CheckFunction::Type = llvm::FunctionType::get(t::Void, { t::SEXP }, false);

char const * CreatePromise::Name = "CreatePromise";
llvm::FunctionType * CreatePromise::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP }, false);

char const * SexpType::Name = "SexpType";
llvm::FunctionType * SexpType::Type = llvm::FunctionType::get(t::Int, { t::SEXP }, false);

char const * AddArgument::Name = "AddArgument";
llvm::FunctionType * AddArgument::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP }, false);

char const * AddKeywordArgument::Name = "AddKeywordArgument";
llvm::FunctionType * AddKeywordArgument::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP }, false);

char const * AddEllipsisArgument::Name = "AddEllipsisArgument";
llvm::FunctionType * AddEllipsisArgument::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::Bool }, false);

char const * CallBuiltin::Name = "CallBuiltin";
llvm::FunctionType * CallBuiltin::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * CallSpecial::Name = "CallSpecial";
llvm::FunctionType * CallSpecial::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * CallClosure::Name = "CallClosure";
llvm::FunctionType * CallClosure::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * CreateClosure::Name = "CreateClosure";
llvm::FunctionType * CreateClosure::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericUnaryMinus::Name = "GenericUnaryMinus";
llvm::FunctionType * GenericUnaryMinus::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericUnaryPlus::Name = "GenericUnaryPlus";
llvm::FunctionType * GenericUnaryPlus::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericAdd::Name = "GenericAdd";
llvm::FunctionType * GenericAdd::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericSub::Name = "GenericSub";
llvm::FunctionType * GenericSub::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericMul::Name = "GenericMul";
llvm::FunctionType * GenericMul::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericDiv::Name = "GenericDiv";
llvm::FunctionType * GenericDiv::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericPow::Name = "GenericPow";
llvm::FunctionType * GenericPow::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericSqrt::Name = "GenericSqrt";
llvm::FunctionType * GenericSqrt::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericExp::Name = "GenericExp";
llvm::FunctionType * GenericExp::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericEq::Name = "GenericEq";
llvm::FunctionType * GenericEq::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericNe::Name = "GenericNe";
llvm::FunctionType * GenericNe::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericLt::Name = "GenericLt";
llvm::FunctionType * GenericLt::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericLe::Name = "GenericLe";
llvm::FunctionType * GenericLe::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericGe::Name = "GenericGe";
llvm::FunctionType * GenericGe::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericGt::Name = "GenericGt";
llvm::FunctionType * GenericGt::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericBitAnd::Name = "GenericBitAnd";
llvm::FunctionType * GenericBitAnd::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericBitOr::Name = "GenericBitOr";
llvm::FunctionType * GenericBitOr::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericNot::Name = "GenericNot";
llvm::FunctionType * GenericNot::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP, t::SEXP }, false);

char const * GenericGetVarMissOK::Name = "GenericGetVarMissOK";
llvm::FunctionType * GenericGetVarMissOK::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP }, false);

char const * GenericGetEllipsisValueMissOK::Name = "GenericGetEllipsisValueMissOK";
llvm::FunctionType * GenericGetEllipsisValueMissOK::Type = llvm::FunctionType::get(t::SEXP, { t::SEXP, t::SEXP }, false);

char const * CheckSwitchControl::Name = "CheckSwitchControl";
llvm::FunctionType * CheckSwitchControl::Type = llvm::FunctionType::get(t::Void, { t::SEXP, t::SEXP }, false);

char const * SwitchControlCharacter::Name = "SwitchControlCharacter";
llvm::FunctionType * SwitchControlCharacter::Type = llvm::FunctionType::get(t::Int, { t::SEXP, t::SEXP, t::SEXP }, false);

char const * SwitchControlInteger::Name = "SwitchControlInteger";
llvm::FunctionType * SwitchControlInteger::Type = llvm::FunctionType::get(t::Int, { t::SEXP, t::Int }, false);

char const * ReturnJump::Name = "ReturnJump";
llvm::FunctionType * ReturnJump::Type = llvm::FunctionType::get(t::Void, { t::SEXP, t::SEXP }, false);

} // namespace ir
} // namespace rjit

