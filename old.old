; ModuleID = '4072613566374285_4296032527.bc'

%R_bcstack_t = type { i32, i32, %struct.SEXPREC* }
%struct.SEXPREC = type { %struct.sxpinfo_struct, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %union.SEXP_SEXP_SEXP }
%struct.sxpinfo_struct = type { i64 }
%union.SEXP_SEXP_SEXP = type { %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC* }
%DeoptReason = type <{ i32, i32, i8* }>
%struct.VECTOR_SEXPREC = type { %struct.sxpinfo_struct, %struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*, %struct.vecsxp_struct }
%struct.vecsxp_struct = type { i64, i64 }
%LazyEnvironment = type { i32, i32, i32, i64, i8* }

@spe_BCNodeStackTop = available_externally externally_initialized global %R_bcstack_t*
@spe_constantPool = available_externally externally_initialized global i64
@dcs_100 = available_externally externally_initialized global %struct.SEXPREC
@copool_27 = private constant [15 x i32] [i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14]
@copool_28 = private constant i32 15
@copool_29 = private constant i32 16
@copool_30 = private constant i32 17
@copool_31 = private constant i32 18
@dcs_106 = available_externally externally_initialized global %struct.SEXPREC
@dcs_104 = available_externally externally_initialized global %struct.SEXPREC
@0 = private unnamed_addr constant [38 x i8] c"missing value where TRUE/FALSE needed\00", align 1
@copool_32 = private constant i32 19
@1 = private unnamed_addr constant [38 x i8] c"missing value where TRUE/FALSE needed\00", align 1
@copool_33 = private constant i32 20
@copool_34 = private constant i32 21
@copool_35 = private constant i32 22
@copool_36 = private constant i32 23
@dcs_103 = available_externally externally_initialized global %struct.SEXPREC
@copool_37 = private constant i32 24
@2 = private unnamed_addr constant [38 x i8] c"missing value where TRUE/FALSE needed\00", align 1
@copool_38 = private constant i32 25
@3 = private unnamed_addr constant [38 x i8] c"missing value where TRUE/FALSE needed\00", align 1
@sym_bitwShiftL = available_externally externally_initialized global %struct.SEXPREC
@dcs_107 = available_externally externally_initialized global %struct.SEXPREC
@4 = private unnamed_addr constant [37 x i8] c"argument is missing, with no default\00", align 1
@5 = private unnamed_addr constant [17 x i8] c"object not found\00", align 1
@copool_39 = private constant i32 26
@6 = private unnamed_addr constant [38 x i8] c"missing value where TRUE/FALSE needed\00", align 1
@sym_x = available_externally externally_initialized global %struct.SEXPREC
@7 = private unnamed_addr constant [37 x i8] c"argument is missing, with no default\00", align 1
@8 = private unnamed_addr constant [17 x i8] c"object not found\00", align 1
@sym_bitwXor = available_externally externally_initialized global %struct.SEXPREC
@9 = private unnamed_addr constant [37 x i8] c"argument is missing, with no default\00", align 1
@10 = private unnamed_addr constant [17 x i8] c"object not found\00", align 1
@copool_40 = private constant i32 27
@copool_41 = private constant i32 28
@copool_42 = private constant i32 29
@11 = private unnamed_addr constant [37 x i8] c"argument is missing, with no default\00", align 1
@12 = private unnamed_addr constant [17 x i8] c"object not found\00", align 1
@copool_43 = private constant i32 27
@copool_44 = private constant i32 30
@copool_45 = private constant i32 31
@13 = private unnamed_addr constant [38 x i8] c"missing value where TRUE/FALSE needed\00", align 1
@dcs_105 = available_externally externally_initialized global %struct.SEXPREC
@copool_46 = private constant i32 32
@copool_47 = private constant i32 32
@spe_Visible = available_externally externally_initialized global i32
@copool_48 = private constant i32 33
@code_250144078105040217_0 = available_externally externally_initialized global i8
@copool_49 = private constant %DeoptReason <{ i32 1, i32 83, i8* @code_250144078105040217_0 }>
@copool_50 = private constant i32 34
@copool_51 = private constant %DeoptReason <{ i32 1, i32 135, i8* @code_250144078105040217_0 }>
@copool_52 = private constant i32 35
@copool_53 = private constant %DeoptReason <{ i32 1, i32 206, i8* @code_250144078105040217_0 }>
@copool_54 = private constant i32 36
@copool_55 = private constant %DeoptReason <{ i32 1, i32 318, i8* @code_250144078105040217_0 }>
@"msg_expected unboxed logical to be 0,1, or NA" = available_externally externally_initialized global i8
@dcs_108 = available_externally externally_initialized global %struct.SEXPREC
@copool_56 = private constant i32 37
@copool_57 = private constant %DeoptReason <{ i32 3, i32 1217, i8* @code_250144078105040217_0 }>
@copool_58 = private constant i32 38
@copool_59 = private constant %DeoptReason <{ i32 1, i32 1385, i8* @code_250144078105040217_0 }>
@copool_60 = private constant i32 39
@copool_61 = private constant %DeoptReason <{ i32 3, i32 1488, i8* @code_250144078105040217_0 }>
@copool_62 = private constant i32 40
@copool_63 = private constant %DeoptReason <{ i32 3, i32 1586, i8* @code_250144078105040217_0 }>
@sym_n = available_externally externally_initialized global %struct.SEXPREC
@14 = private unnamed_addr constant [37 x i8] c"argument is missing, with no default\00", align 1
@15 = private unnamed_addr constant [17 x i8] c"object not found\00", align 1
@sym_mandelbrot = available_externally externally_initialized global %struct.SEXPREC
@16 = private unnamed_addr constant [37 x i8] c"argument is missing, with no default\00", align 1
@17 = private unnamed_addr constant [17 x i8] c"object not found\00", align 1
@copool_64 = private constant i32 41
@copool_65 = private constant [1 x i32] [i32 42]
@copool_66 = private constant i32 43
@clso_0_250144078105040217 = available_externally externally_initialized global %struct.SEXPREC
@optd_250144078105040217_16399 = available_externally externally_initialized global i32
@copool_67 = private constant [1 x i32] [i32 42]
@copool_68 = private constant i32 44
@code_4072613566374285_0 = available_externally externally_initialized global i8
@copool_69 = private constant %DeoptReason <{ i32 3, i32 5, i8* @code_4072613566374285_0 }>
@copool_70 = private constant i32 45
@copool_71 = private constant %DeoptReason <{ i32 1, i32 44, i8* @code_4072613566374285_0 }>

declare %struct.SEXPREC* @createStubEnvironment(%struct.SEXPREC*, i32, i32*, i32)

declare void @externalsxpSetEntry(%struct.SEXPREC*, i32, %struct.SEXPREC*)

declare %struct.SEXPREC* @forcePromise(%struct.SEXPREC*)

declare %struct.SEXPREC* @newReal(double)

declare void @error(i8*)

declare %struct.SEXPREC* @ldvarGlobal(%struct.SEXPREC*)

declare i1 @cksEq(%struct.SEXPREC*, %struct.SEXPREC*)

declare %struct.SEXPREC* @ldvar(%struct.SEXPREC*, %struct.SEXPREC*)

declare %struct.SEXPREC* @newInt(i32)

; Function Attrs: argmemonly nofree nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #0

declare void @deoptPool(i8*, %struct.SEXPREC*, %struct.SEXPREC*, %R_bcstack_t*, %DeoptReason*, %struct.SEXPREC*)

declare void @assertFail(i8*)

define %struct.SEXPREC* @f_5543_E78053CEE618D_10010410F_0(i8* %code, %R_bcstack_t* %args, %struct.SEXPREC* %env, %struct.SEXPREC* %closure) {
  %1 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %2 = alloca %struct.SEXPREC*, i64 0, align 8
  %PIRe0.0 = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 0, i32 2
  %"PIR%0.1" = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 1, i32 2
  %"PIR%0.3" = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 1, i32 2
  %3 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %4 = bitcast %R_bcstack_t* %3 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %4, i8 0, i64 32, i1 false)
  %5 = getelementptr %R_bcstack_t, %R_bcstack_t* %3, i32 2
  store %R_bcstack_t* %5, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  br label %BB0

BB0:                                              ; preds = %0
  store %struct.SEXPREC* %env, %struct.SEXPREC** %PIRe0.0, align 8
  %6 = load %struct.SEXPREC*, %struct.SEXPREC** %PIRe0.0, align 8
  %n = call %struct.SEXPREC* @ldvar(%struct.SEXPREC* @sym_n, %struct.SEXPREC* %6)
  %7 = icmp eq %struct.SEXPREC* %n, @dcs_107
  br i1 %7, label %10, label %8, !prof !0

8:                                                ; preds = %10, %BB0
  %9 = icmp eq %struct.SEXPREC* %n, @dcs_106
  br i1 %9, label %17, label %11, !prof !0

10:                                               ; preds = %BB0
  call void @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @14, i32 0, i32 0))
  br label %8

11:                                               ; preds = %17, %8
  store %struct.SEXPREC* %n, %struct.SEXPREC** %"PIR%0.1", align 8
  store i32 1, i32* @spe_Visible, align 4
  %12 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%0.1", align 8
  %sxpinfo = getelementptr %struct.SEXPREC, %struct.SEXPREC* %12, i32 0, i32 0, i32 0
  %13 = load i64, i64* %sxpinfo, align 4
  %14 = and i64 %13, 31
  %15 = trunc i64 %14 to i32
  %16 = icmp eq i32 %15, 5
  br i1 %16, label %18, label %24

17:                                               ; preds = %8
  call void @error(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @15, i32 0, i32 0))
  br label %11

18:                                               ; preds = %11
  %19 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %12, i32 0, i32 4, i32 0
  %20 = load %struct.SEXPREC*, %struct.SEXPREC** %19, align 8
  %21 = icmp eq %struct.SEXPREC* %20, @dcs_106
  br i1 %21, label %22, label %25, !prof !1

22:                                               ; preds = %18
  %23 = call %struct.SEXPREC* @forcePromise(%struct.SEXPREC* %12)
  br label %26

24:                                               ; preds = %11
  br label %26

25:                                               ; preds = %18
  br label %26

26:                                               ; preds = %25, %24, %22
  %"PIR%0.31" = phi %struct.SEXPREC* [ %23, %22 ], [ %12, %24 ], [ %20, %25 ]
  store %struct.SEXPREC* %"PIR%0.31", %struct.SEXPREC** %"PIR%0.3", align 8
  %27 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%0.3", align 8
  %28 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %29 = getelementptr %R_bcstack_t, %R_bcstack_t* %28, i32 -2
  store %R_bcstack_t* %29, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  ret %struct.SEXPREC* %27
}

define %struct.SEXPREC* @f_5543_E78053CEE618D_10010410F_1(i8* %code, %R_bcstack_t* %args, %struct.SEXPREC* %env, %struct.SEXPREC* %closure) {
  %1 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %2 = alloca %struct.SEXPREC*, i64 0, align 8
  %"PIR%0.1" = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 0, i32 2
  %PIRe6.0 = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 0, i32 2
  %"PIR%6.1" = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 1, i32 2
  %"PIR%6.2" = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 1, i32 2
  %PIRe7.0 = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 1, i32 2
  %3 = getelementptr %R_bcstack_t, %R_bcstack_t* %args, i32 0, i32 2
  %4 = load %struct.SEXPREC*, %struct.SEXPREC** %3, align 8
  %5 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %6 = bitcast %R_bcstack_t* %5 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %6, i8 0, i64 48, i1 false)
  %7 = getelementptr %R_bcstack_t, %R_bcstack_t* %5, i32 3
  store %R_bcstack_t* %7, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  br label %BB0

BB0:                                              ; preds = %0
  %mandelbrot = call %struct.SEXPREC* @ldvarGlobal(%struct.SEXPREC* @sym_mandelbrot)
  %8 = icmp eq %struct.SEXPREC* %mandelbrot, @dcs_107
  br i1 %8, label %11, label %9, !prof !0

9:                                                ; preds = %11, %BB0
  %10 = icmp eq %struct.SEXPREC* %mandelbrot, @dcs_106
  br i1 %10, label %25, label %12, !prof !0

11:                                               ; preds = %BB0
  call void @error(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @16, i32 0, i32 0))
  br label %9

12:                                               ; preds = %25, %9
  store %struct.SEXPREC* %mandelbrot, %struct.SEXPREC** %"PIR%0.1", align 8
  %13 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%0.1", align 8
  %14 = load i32, i32* @copool_64, align 4
  %15 = load %struct.SEXPREC*, %struct.SEXPREC** getelementptr (%struct.SEXPREC*, %struct.SEXPREC** inttoptr (i64* @spe_constantPool to %struct.SEXPREC**), i32 1), align 8
  %16 = bitcast %struct.SEXPREC* %15 to %struct.VECTOR_SEXPREC*
  %17 = getelementptr %struct.VECTOR_SEXPREC, %struct.VECTOR_SEXPREC* %16, i32 1
  %18 = bitcast %struct.VECTOR_SEXPREC* %17 to %struct.SEXPREC**
  %19 = getelementptr %struct.SEXPREC*, %struct.SEXPREC** %18, i32 %14
  %20 = load %struct.SEXPREC*, %struct.SEXPREC** %19, align 8
  %sxpinfo = getelementptr %struct.SEXPREC, %struct.SEXPREC* %13, i32 0, i32 0, i32 0
  %21 = load i64, i64* %sxpinfo, align 4
  %22 = and i64 %21, 31
  %23 = trunc i64 %22 to i32
  %24 = icmp eq i32 %23, 5
  br i1 %24, label %isProm, label %isVal, !prof !1

25:                                               ; preds = %9
  call void @error(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @17, i32 0, i32 0))
  br label %12

isProm:                                           ; preds = %12
  %26 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %13, i32 0, i32 4, i32 0
  %27 = load %struct.SEXPREC*, %struct.SEXPREC** %26, align 8
  br label %28

isVal:                                            ; preds = %12
  br label %28

28:                                               ; preds = %isVal, %isProm
  %29 = phi %struct.SEXPREC* [ %27, %isProm ], [ %13, %isVal ]
  %30 = icmp eq %struct.SEXPREC* %29, %20
  %31 = icmp ne %struct.SEXPREC* %29, @dcs_106
  %32 = and i1 %30, %31
  br i1 %32, label %67, label %33

33:                                               ; preds = %28
  %sxpinfo1 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %20, i32 0, i32 0, i32 0
  %34 = load i64, i64* %sxpinfo1, align 4
  %35 = and i64 %34, 31
  %36 = trunc i64 %35 to i32
  %37 = icmp eq i32 %36, 3
  %sxpinfo2 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %29, i32 0, i32 0, i32 0
  %38 = load i64, i64* %sxpinfo2, align 4
  %39 = and i64 %38, 31
  %40 = trunc i64 %39 to i32
  %41 = icmp eq i32 %40, 3
  %42 = and i1 %41, %37
  %sxpinfo3 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %20, i32 0, i32 0, i32 0
  %43 = load i64, i64* %sxpinfo3, align 4
  %44 = and i64 %43, 31
  %45 = trunc i64 %44 to i32
  %46 = icmp eq i32 %45, 6
  %sxpinfo4 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %29, i32 0, i32 0, i32 0
  %47 = load i64, i64* %sxpinfo4, align 4
  %48 = and i64 %47, 31
  %49 = trunc i64 %48 to i32
  %50 = icmp eq i32 %49, 6
  %51 = and i1 %50, %46
  %sxpinfo5 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %20, i32 0, i32 0, i32 0
  %52 = load i64, i64* %sxpinfo5, align 4
  %53 = and i64 %52, 31
  %54 = trunc i64 %53 to i32
  %55 = icmp eq i32 %54, 6
  %sxpinfo6 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %29, i32 0, i32 0, i32 0
  %56 = load i64, i64* %sxpinfo6, align 4
  %57 = and i64 %56, 31
  %58 = trunc i64 %57 to i32
  %59 = icmp eq i32 %58, 26
  %60 = and i1 %59, %55
  %61 = or i1 %42, %51
  %62 = or i1 %61, %60
  br i1 %62, label %63, label %65

63:                                               ; preds = %33
  %64 = call i1 @cksEq(%struct.SEXPREC* %29, %struct.SEXPREC* %20)
  br label %65

65:                                               ; preds = %63, %33
  %66 = phi i1 [ %64, %63 ], [ false, %33 ]
  br label %67

67:                                               ; preds = %65, %28
  %68 = phi i1 [ true, %28 ], [ %66, %65 ]
  %"PIR%0.2" = zext i1 %68 to i32
  %69 = icmp ne i32 %"PIR%0.2", 0
  br i1 %69, label %BB6, label %BB7, !prof !2

BB7:                                              ; preds = %67
  %PIRe7.014 = call %struct.SEXPREC* @createStubEnvironment(%struct.SEXPREC* @dcs_100, i32 1, i32* getelementptr inbounds ([1 x i32], [1 x i32]* @copool_67, i32 0, i32 0), i32 1)
  %70 = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 2, i32 2
  store volatile %struct.SEXPREC* %PIRe7.014, %struct.SEXPREC** %70, align 8
  %sxpinfo11 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %PIRe7.014, i32 0, i32 0, i32 0
  %71 = load i64, i64* %sxpinfo11, align 4
  %72 = and i64 %71, 16777216
  %73 = icmp ne i64 %72, 0
  br i1 %73, label %151, label %142

BB6:                                              ; preds = %67
  %74 = call %struct.SEXPREC* @createBindingCellImpl(%struct.SEXPREC* %4, %struct.SEXPREC* @sym_n, %struct.SEXPREC* @dcs_104)
  %PIRe6.07 = call %struct.SEXPREC* @createEnvironment(%struct.SEXPREC* @dcs_100, %struct.SEXPREC* %74, i32 1)
  store %struct.SEXPREC* %PIRe6.07, %struct.SEXPREC** %PIRe6.0, align 8
  %75 = ptrtoint i8* %code to i64
  %76 = add i64 %75, 12
  %77 = inttoptr i64 %76 to %struct.SEXPREC**
  %78 = load %struct.SEXPREC*, %struct.SEXPREC** %77, align 8
  %79 = bitcast %struct.SEXPREC* %78 to %struct.VECTOR_SEXPREC*
  %80 = getelementptr %struct.VECTOR_SEXPREC, %struct.VECTOR_SEXPREC* %79, i32 1
  %81 = bitcast %struct.VECTOR_SEXPREC* %80 to %struct.SEXPREC**
  %82 = getelementptr inbounds %struct.SEXPREC*, %struct.SEXPREC** %81, i64 0
  %83 = load %struct.SEXPREC*, %struct.SEXPREC** %82, align 8
  %84 = load %struct.SEXPREC*, %struct.SEXPREC** %PIRe6.0, align 8
  %"PIR%6.18" = call %struct.SEXPREC* @createPromise(%struct.SEXPREC* %83, %struct.SEXPREC* %84)
  store %struct.SEXPREC* %"PIR%6.18", %struct.SEXPREC** %"PIR%6.1", align 8
  %85 = load i32, i32* @copool_66, align 4
  %86 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %87 = getelementptr %R_bcstack_t, %R_bcstack_t* %86, i32 1
  store %R_bcstack_t* %87, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %88 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%6.1", align 8
  %89 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %90 = getelementptr %R_bcstack_t, %R_bcstack_t* %89, i64 -1
  %91 = bitcast %R_bcstack_t* %90 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %91, i8 0, i64 16, i1 false)
  %92 = getelementptr %R_bcstack_t, %R_bcstack_t* %89, i64 -1, i32 2
  store %struct.SEXPREC* %88, %struct.SEXPREC** %92, align 8
  %93 = load i32, i32* @optd_250144078105040217_16399, align 4
  %94 = load %struct.SEXPREC*, %struct.SEXPREC** %PIRe6.0, align 8
  %"PIR%6.29" = call %struct.SEXPREC* @nativeCallTrampoline(i64 -1, i8* %code, %struct.SEXPREC* @clso_0_250144078105040217, i32 %93, i32 %85, %struct.SEXPREC* %94, i64 1, i64 16399)
  %95 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %96 = getelementptr %R_bcstack_t, %R_bcstack_t* %95, i32 -1
  store %R_bcstack_t* %96, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  store %struct.SEXPREC* %"PIR%6.29", %struct.SEXPREC** %"PIR%6.2", align 8
  %97 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%6.2", align 8
  %sxpinfo10 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %97, i32 0, i32 0, i32 0
  %98 = load i64, i64* %sxpinfo10, align 4
  %99 = and i64 %98, 31
  %100 = trunc i64 %99 to i32
  %101 = icmp eq i32 13, %100
  %102 = and i64 %98, 32
  %103 = icmp ne i64 0, %102
  %104 = and i1 %101, %103
  %105 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %97, i32 0, i32 1
  %106 = load %struct.SEXPREC*, %struct.SEXPREC** %105, align 8
  %107 = icmp eq %struct.SEXPREC* %106, @dcs_104
  %108 = and i1 %104, %107
  %"PIR%6.3" = zext i1 %108 to i32
  %109 = icmp ne i32 %"PIR%6.3", 0
  br i1 %109, label %BB8, label %BB9, !prof !2

BB9:                                              ; preds = %BB6
  %110 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %111 = getelementptr %R_bcstack_t, %R_bcstack_t* %110, i32 2
  store %R_bcstack_t* %111, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %112 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%6.2", align 8
  %113 = load %struct.SEXPREC*, %struct.SEXPREC** %PIRe6.0, align 8
  %114 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %115 = getelementptr %R_bcstack_t, %R_bcstack_t* %114, i64 -2
  %116 = bitcast %R_bcstack_t* %115 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %116, i8 0, i64 32, i1 false)
  %117 = getelementptr %R_bcstack_t, %R_bcstack_t* %114, i64 -2, i32 2
  store %struct.SEXPREC* %112, %struct.SEXPREC** %117, align 8
  %118 = getelementptr %R_bcstack_t, %R_bcstack_t* %114, i64 -1, i32 2
  store %struct.SEXPREC* %113, %struct.SEXPREC** %118, align 8
  %119 = load i32, i32* @copool_70, align 4
  %120 = load %struct.SEXPREC*, %struct.SEXPREC** getelementptr (%struct.SEXPREC*, %struct.SEXPREC** inttoptr (i64* @spe_constantPool to %struct.SEXPREC**), i32 1), align 8
  %121 = bitcast %struct.SEXPREC* %120 to %struct.VECTOR_SEXPREC*
  %122 = getelementptr %struct.VECTOR_SEXPREC, %struct.VECTOR_SEXPREC* %121, i32 1
  %123 = bitcast %struct.VECTOR_SEXPREC* %122 to %struct.SEXPREC**
  %124 = getelementptr %struct.SEXPREC*, %struct.SEXPREC** %123, i32 %119
  %125 = load %struct.SEXPREC*, %struct.SEXPREC** %124, align 8
  %126 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%6.2", align 8
  call void @deoptPool(i8* %code, %struct.SEXPREC* %closure, %struct.SEXPREC* %125, %R_bcstack_t* %args, %DeoptReason* @copool_71, %struct.SEXPREC* %126)
  %127 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %128 = getelementptr %R_bcstack_t, %R_bcstack_t* %127, i32 -2
  store %R_bcstack_t* %128, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  unreachable

BB8:                                              ; preds = %BB6
  %129 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%6.2", align 8
  %130 = bitcast %struct.SEXPREC* %129 to %struct.VECTOR_SEXPREC*
  %131 = getelementptr %struct.VECTOR_SEXPREC, %struct.VECTOR_SEXPREC* %130, i32 1
  %132 = bitcast %struct.VECTOR_SEXPREC* %131 to i32*
  %"PIR%8.0" = load i32, i32* %132, align 4
  %133 = call %struct.SEXPREC* @newInt(i32 %"PIR%8.0")
  %134 = getelementptr %R_bcstack_t, %R_bcstack_t* %1, i64 2, i32 2
  store volatile %struct.SEXPREC* %133, %struct.SEXPREC** %134, align 8
  %135 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %136 = getelementptr %R_bcstack_t, %R_bcstack_t* %135, i32 -3
  store %R_bcstack_t* %136, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  ret %struct.SEXPREC* %133

137:                                              ; preds = %159, %142
  %sxpinfo13 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %4, i32 0, i32 0, i32 0
  %138 = load i64, i64* %sxpinfo13, align 4
  %139 = lshr i64 %138, 32
  %140 = and i64 %139, 65535
  %141 = icmp eq i64 %140, 7
  br i1 %141, label %165, label %160

142:                                              ; preds = %155, %BB7
  %143 = bitcast %struct.SEXPREC* %PIRe7.014 to %struct.VECTOR_SEXPREC*
  %144 = getelementptr %struct.VECTOR_SEXPREC, %struct.VECTOR_SEXPREC* %143, i32 1
  %145 = bitcast %struct.VECTOR_SEXPREC* %144 to %LazyEnvironment*
  %146 = getelementptr %LazyEnvironment, %LazyEnvironment* %145, i32 1
  %147 = bitcast %LazyEnvironment* %146 to i8*
  %148 = getelementptr i8, i8* %147, i64 1
  %149 = bitcast i8* %148 to %struct.SEXPREC**
  %150 = getelementptr %struct.SEXPREC*, %struct.SEXPREC** %149, i32 2
  store %struct.SEXPREC* %4, %struct.SEXPREC** %150, align 8
  br label %137

151:                                              ; preds = %BB7
  %sxpinfo12 = getelementptr %struct.SEXPREC, %struct.SEXPREC* %4, i32 0, i32 0, i32 0
  %152 = load i64, i64* %sxpinfo12, align 4
  %153 = and i64 %152, 16777216
  %154 = icmp ne i64 %153, 0
  br i1 %154, label %155, label %159

155:                                              ; preds = %151
  %156 = and i64 %71, 268435456
  %157 = and i64 %152, 268435456
  %158 = icmp ugt i64 %156, %157
  br i1 %158, label %159, label %142, !prof !1

159:                                              ; preds = %155, %151
  call void @externalsxpSetEntry(%struct.SEXPREC* %PIRe7.014, i32 2, %struct.SEXPREC* %4)
  br label %137

160:                                              ; preds = %137
  %161 = add nuw nsw i64 %140, 1
  %162 = shl i64 %161, 32
  %163 = and i64 %138, -281470681743361
  %164 = or i64 %163, %162
  store i64 %164, i64* %sxpinfo13, align 4
  br label %165

165:                                              ; preds = %160, %137
  store %struct.SEXPREC* %PIRe7.014, %struct.SEXPREC** %PIRe7.0, align 8
  %166 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %167 = getelementptr %R_bcstack_t, %R_bcstack_t* %166, i32 1
  store %R_bcstack_t* %167, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %168 = load %struct.SEXPREC*, %struct.SEXPREC** %PIRe7.0, align 8
  %169 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %170 = getelementptr %R_bcstack_t, %R_bcstack_t* %169, i64 -1
  %171 = bitcast %R_bcstack_t* %170 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 8 %171, i8 0, i64 16, i1 false)
  %172 = getelementptr %R_bcstack_t, %R_bcstack_t* %169, i64 -1, i32 2
  store %struct.SEXPREC* %168, %struct.SEXPREC** %172, align 8
  %173 = load i32, i32* @copool_68, align 4
  %174 = load %struct.SEXPREC*, %struct.SEXPREC** getelementptr (%struct.SEXPREC*, %struct.SEXPREC** inttoptr (i64* @spe_constantPool to %struct.SEXPREC**), i32 1), align 8
  %175 = bitcast %struct.SEXPREC* %174 to %struct.VECTOR_SEXPREC*
  %176 = getelementptr %struct.VECTOR_SEXPREC, %struct.VECTOR_SEXPREC* %175, i32 1
  %177 = bitcast %struct.VECTOR_SEXPREC* %176 to %struct.SEXPREC**
  %178 = getelementptr %struct.SEXPREC*, %struct.SEXPREC** %177, i32 %173
  %179 = load %struct.SEXPREC*, %struct.SEXPREC** %178, align 8
  %180 = load %struct.SEXPREC*, %struct.SEXPREC** %"PIR%0.1", align 8
  call void @deoptPool(i8* %code, %struct.SEXPREC* %closure, %struct.SEXPREC* %179, %R_bcstack_t* %args, %DeoptReason* @copool_69, %struct.SEXPREC* %180)
  %181 = load %R_bcstack_t*, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  %182 = getelementptr %R_bcstack_t, %R_bcstack_t* %181, i32 -1
  store %R_bcstack_t* %182, %R_bcstack_t** @spe_BCNodeStackTop, align 8
  unreachable
}

declare %struct.SEXPREC* @createBindingCellImpl(%struct.SEXPREC*, %struct.SEXPREC*, %struct.SEXPREC*)

declare %struct.SEXPREC* @createEnvironment(%struct.SEXPREC*, %struct.SEXPREC*, i32)

declare %struct.SEXPREC* @createPromise(%struct.SEXPREC*, %struct.SEXPREC*)

declare %struct.SEXPREC* @nativeCallTrampoline(i64, i8*, %struct.SEXPREC*, i32, i32, %struct.SEXPREC*, i64, i64)

attributes #0 = { argmemonly nofree nounwind willreturn writeonly }

!0 = !{!"branch_weights", i32 1, i32 100000000}
!1 = !{!"branch_weights", i32 1, i32 1000}
!2 = !{!"branch_weights", i32 100000000, i32 1}
